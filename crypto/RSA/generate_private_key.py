from Crypto.PublicKey import RSA

# Replace these values with your actual p, q, and e
# p = 61
# q = 53
# e = 17

n = 689061037339483636851744871564868379980061151991904073814057216873412583484720768694905841053416938972235588548525570270575285633894975913717130070544407480547826227398039831409929129742007101671851757453656032161443946817685708282221883187089692065998793742064551244403369599965441075497085384181772038720949
p = 23382692671581814681147482973935631627665647364166311968381601793328093890106781554729959383140453326622761892739721372265697969595635573251067121224383831
q = 29468848905367295280655884817633431891433303833944997890434617505601421238696194085380181344342650644888169861836368327919791052354262892280583075696679379
e = 98161001623245946455371459972270637048947096740867123960987426843075734419854169415217693040603943985614577854750928453684840929755254248201161248375350238628917413291201125030514500977409961838501076015838508082749034318410808298025858181711613372870289482890074072555265382600388541381732534018133370862587


# Calculate n and phi(n)
# n = p * q
phi_n = (p - 1) * (q - 1)

# Calculate the private exponent d
d = pow(e, -1, phi_n)

# Create a private key using the RSA module from PyCryptodome
private_key = RSA.construct((n, e, d, p, q))

# Save the private key to a file (optional)
with open("private_key.pem", "wb") as f:
    f.write(private_key.export_key())
